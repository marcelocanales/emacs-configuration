#+startup:overview indent
* Benchmark Init
#+begin_src emacs-lisp
  (use-package benchmark-init
     :ensure t
     :config
     ;; To disable collection of benchmark data after init is done.
     (add-hook 'after-init-hook 'benchmark-init/deactivate))
  (benchmark-init/activate)
#+end_src
* Environment Variables
  #+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :ensure t)

    (dolist (var '("JAVA_HOME" "LSP_USE_PLISTS"))
      (add-to-list 'exec-path-from-shell-variables var))

    (exec-path-from-shell-initialize)


    (setq auto-save-file-name-transforms
              `((".*" ,(concat user-emacs-directory "auto-save/") t))) 


    ;; Backups
    ;; Don't clutter up directories with files~
    (setq backup-directory-alist `(("." . ,(expand-file-name
                                            (concat dotfiles-dir "backups")))))


    (setq undo-limit 100)
    

  #+end_src
* Interface Tweeks
#+begin_src emacs-lisp
  ;; Disable startup message
  (setq inhibit-startup-message t)
  ;; Disable tool bar
  (tool-bar-mode -1)
  ;; Disable menu bar
  (menu-bar-mode t)
  ;; Disable scroll bar
  (toggle-scroll-bar -1)
  ;; Display line numbers
  (global-display-line-numbers-mode t)
  ;; Enable line highlight
  (global-hl-line-mode t)

  ;; Transparency configuration
  ;;(set-frame-parameter (selected-frame) 'alpha '(95 . 80))
  ;;(add-to-list 'default-frame-alist '(alpha . (95 . 80)))
#+end_src
* Font
  #+begin_src emacs-lisp
    ;;(set-frame-font "Source Code Pro 10" nil t)
    (add-to-list 'default-frame-alist '(font . "Fira Code-10.8"))
  #+end_src
* Matching Delimiters
#+begin_src emacs-lisp
  ;; Electric Pair
  (electric-pair-mode t)
#+end_src
* Wrap and truncate lines
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook
                    '(lambda()
                           (setq truncate-lines nil word-wrap t)))

  (add-hook 'prog-mode-hook
                    '(lambda()
                           (setq truncate-lines t word-wrap nil)))
#+end_src
* Global Key Binding
  #+begin_src emacs-lisp
    ;; Personal global and generals key binding
    (global-set-key (kbd "C-z") 'undo)
  #+end_src
* Buffers
  #+begin_src emacs-lisp
    (defalias 'list-buffers 'ibuffer)
  #+end_src
* Ido
  #+begin_src emacs-lisp
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)

  #+end_src
* Try
#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src
* Org-Mode
#+begin_src emacs-lisp
  (straight-use-package '(org :type built-in))
    ;; Org-Mode Stuff
    (use-package org-bullets
      :ensure t
      :custom (org-bullets-bullet-list
                       '("●" "○" "▶" "◆" "◇")) (org-ellipsis "⤵")
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))


    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
     '(org-document-title ((t (:inherit outline-1 :height 1.5))))
     )

    ;; Org TODO States
    (setq org-todo-keywords
              '((sequence "TODO(t)" "DOING(g)" "|"   "DONE(d)")))

    ;; Indent mode by default
  (add-hook 'org-mode-hook 'org-indent-mode)

  ;; Permite colocar atributos para redimencionar imagenes
  (setq org-image-actual-width nil)

  ;; Inicia mostrando imagenes inline
  (setq org-startup-with-inline-images t)
#+end_src
* Org-Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :after org
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-directory (file-truename "~/Documents/roam-notes/"))
    (org-roam-capture-templates
     '(("d" "default" plain
            "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
  ("l" "programming language" plain
   "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
   :unnarrowed t)

     ))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))
#+end_src
* Org-Roam-UI
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :straight
      (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
      :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))
#+end_src
* Babel
#+begin_src emacs-lisp
  (use-package ob-restclient
    :ensure t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src
* Ace Window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))

#+end_src

* Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

* Super Save
#+begin_src emacs-lisp
    (use-package super-save
      :ensure t
      :config
      (super-save-mode +1))

    (setq super-save-auto-save-when-idle t)

    ;;Auto Save default disabled
    (setq auto-save-default nil)

    ;; add integration with ace-window
    (add-to-list 'super-save-triggers 'ace-window)

    ;; save on find-file
    (add-to-list 'super-save-hook-triggers 'find-file-hook)

    ;; Turn off super-save remote files
    (setq super-save-remote-files nil)

    ;; Super save exclude example - Sigue deshabilitado
    ;;(setq super-save-exclude '(".gpg"))
#+end_src
* Counsel
  #+begin_src emacs-lisp
    (use-package counsel
      :ensure t)
  #+end_src
  
* Swipper
  #+begin_src emacs-lisp
    (use-package swiper
	:ensure try
	:bind (
	       ("C-s" . swiper)
	       ("C-r" . swiper)
	       ("C-c C-r" . 'ivy-resume)
	       ("M-x" . counsel-M-x)
	       ("C-x C-f" . counsel-find-file)
	      )
	:config
	(progn
	  (ivy-mode)
	  (setq ivy-use-virtual-buffers t)

	  (setq enable-recursive-minibuffers t)
	  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	 ))
  #+end_src

* Avy
  #+begin_src emacs-lisp
    (use-package avy 
     :ensure t
      :bind ("M-s" . avy-goto-char-2))
  #+end_src
  
* Silversearcher
#+begin_src emacs-lisp
  (use-package ag
    :ensure t
    :config
    (setq ag-highlight-search t))
#+end_src
* Undo-Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode t))

  ;; Prevent undo tree files from polluting your git repo
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src
* Indentation
  #+begin_src emacs-lisp
    (setq custom-tab-width 4)

    (defun disable-tabs ()
	      (interactive)
      (setq indent-tabs-mode nil))

    (defun enable-tabs ()
	      (interactive)
      (local-set-key (kbd "TAB") 'tab-to-tab-stop)
      (setq indent-tabs-mode t)
      (setq tab-width custom-tab-width))

    ;; Hooks to Enable Tabs
    (add-hook 'prog-mode-hook 'enable-tabs)
    ;; Hook to Disable Tabs
    (add-hook 'lisp-mode-hook 'disable-tabs)
    (add-hook 'java-mode-hook 'disable-tabs)
  #+end_src
* Company
  #+begin_src emacs-lisp
        (use-package company
          :ensure t
          :config
          (setq company-dabbrev-downcase 0)
          (setq company-idle-delay 0)
          (setq company-minimum-prefix-length 1)
          (setq lsp-completion-provider :capf))
        ; Wich One?
        (global-company-mode t)
        (add-hook 'after-init-hook 'global-company-mode)

        (setq company-dabbrev-downcase nil)


  #+end_src
* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)

  (use-package yasnippet-snippets
    :ensure t)

  (setq yas-snippet-dirs '("~/.config/emacs/snippets/"))

  (yas-global-mode 1)

#+end_src
* Tree-sitter
  #+begin_src emacs-lisp
    ;; Tree sitter
    (use-package tree-sitter
      :ensure t
      :defer t
      :config
      (global-tree-sitter-mode t))

    (use-package tree-sitter-langs
      :defer t
      :ensure t)

    (use-package treemacs-projectile
      :after treemacs projectile
      :defer t
      :ensure t)

  #+end_src
* All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-ivy
    :ensure t
    :init (all-the-icons-ivy-setup))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
* Treemacs
  #+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :config
      (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))

    (use-package treemacs-all-the-icons
      :ensure t)

    (treemacs-load-theme "all-the-icons")


  #+end_src
* Projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :init
      (projectile-mode +1)
      :bind (:map projectile-mode-map
                  ("s-p" . projectile-command-map)
                  ("C-c p" . projectile-command-map))
      :config
      (setq projectile-indexing-method 'alien)
      (setq projectile-enable-caching t)            
      (setq projectile-generic-command "fd . --type f --hidden --follow --exclude .git")
      (projectile-global-mode)
      (setq projectile-completion-system 'ivy))
  #+end_src
* Counsel Projectile
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+end_src
* Flycheck
  #+begin_src emacs-lisp
    (use-package flycheck
      :ensure t)
  #+end_src
* Rest Client
  #+begin_src emacs-lisp
    (use-package restclient
      :ensure t)
  #+end_src
* HTML
#+begin_src emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.php$" . web-mode))
  )
    (setq web-mode-enable-auto-closing t)
#+end_src
* Json
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t)

  (use-package json-navigator
    :ensure t)
#+end_src
* Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src
* Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    :defer t)
#+end_src
* Python
#+begin_src emacs-lisp
  (use-package pyvenv
    :ensure t
    :defer t
    :config
    (setq pyvenv-virtualenv-root "~/.miniconda/envs")
    (pyvenv-activate "~/.miniconda/envs/default")
    (setenv "WORKON_HOME" "~/.miniconda/envs"))
#+end_src
* LSP
#+begin_src emacs-lisp
    (use-package lsp-mode
      :ensure t
      :defer t
      :init
      (setq lsp-keymap-prefix "C-c l")
      :hook (
             (java-mode . lsp)
                     (c-mode . #'lsp-deferred)
                     (c++-mode . #'lsp-deferred)
                     (python-mode . #'lsp-deferred)
                     (json-mode . #'lsp-deferred)
                     (typescript-mode . #'lsp-deferred)
                     (web-mode . #'lsp-deferred)
                     (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp
      :config
    (setq lsp-completion-enable-additional-text-edit t))

    (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode)

    (use-package lsp-treemacs
      :ensure t
      :defer t
      :commands lsp-treemacs-errors-list
          :config
          (lsp-treemacs-sync-mode 1)
  )

    (use-package lsp-ivy
      :ensure t
      :init
      :bind
      (
       ("C-c l g s" . 'lsp-ivy-workspace-symbol)
       ("C-c l g S" . 'lsp-ivy-global-workspace-symbol))  
      :commands lsp-ivy-workspace-symbol)

    (use-package lsp-java
      :ensure t
      :hook (
                     (java-mode . lsp))
      :config
  ;;    (setq lsp-java-server-install-dir "/opt/lsp/jdtls")
      (setq lsp-java-vmargs
                    '("-noverify"
                      "-Xmx2G"
                      "-XX:+UseG1GC"
                      "-XX:+UseStringDeduplication"
                      "-javaagent:/usr/local/share/lombok/lombok.jar"))
      (setq lsp-java-configuration-runtimes
                    '[
                      (
                       :name "JavaSE-1.8"
                       :path "/opt/oracle/java/jdk1.8.0_202")
                      (
                       :name "JavaSE-11"
                                                     :path "/opt/oracle/java/jdk-11.0.12")
                      (
                       :name "JavaSE-17"
                             :path "/opt/oracle/java/jdk-17.0.1"
                                                     :default t)

                                      ]))

    (setq lsp-idle-delay 0.500)

    ;; SpringBoot Experimental Integrations STS4
    ;;Comentado por pruebas de rendimiento
    ;;(require 'lsp-java-boot)
    ;; to enable the lenses
    (add-hook 'lsp-mode-hook #'lsp-lens-mode)

    ;; Comentado por pruebas de rendimiento
    ;;(add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)

  #+end_src
* DAP
#+begin_src emacs-lisp
    (use-package dap-mode
      :ensure t
      :defer t
      ;;:after lsp-mode
      :config
      (dap-auto-configure-mode)
      (dap-mode t)
      (dap-ui-mode t)
      (dap-tooltip-mode 1)
      (tooltip-mode 1)
      (dap-register-debug-template
       "localhost:8453"
       (list :type "java"
             :request "attach"
             :hostName "localhost"
             :port 8453
                     :projectName: "venta")
       )
    )

    (use-package dap-java
      :ensure nil
      :defer t)
#+end_src
* Themes
  #+begin_src emacs-lisp
    ;; Themes
    ;; (use-package gruvbox-theme
    ;;   :ensure t)

    ;; (use-package cyberpunk-theme
    ;;   :ensure t)

    ;; (use-package zenburn-theme
    ;;   :ensure t)

    ;; (use-package monokai-theme
    ;;   :ensure t)

     (use-package doom-themes
       :ensure t
       :config
       (progn
             (setq doom-themes-enable-bold t) ; if nil, bold is universally disabled
             (setq doom-themes-enable-italic t) ; if nil, italics is universally disabled
     ;;        ;;(load-theme 'doom-one t)))		
             (load-theme 'doom-gruvbox t)))		
     ;;        ;; (load-theme 'doom-palenight t)))

  #+end_src
* Modeline
  #+begin_src emacs-lisp
        ;; This package requires the fonts included with all-the-icons to be installed. Run M-x all-the-icons-install-fonts to do so. Please refer to the installation guide.
        (use-package doom-modeline
          :ensure t
          :hook (after-init . doom-modeline-mode)
          :config
          (progn
                (setq doom-modeline-height 25)
                (setq doom-modeline-bar-width 6)
                (setq doom-modeline-hud nil)
                (setq doom-modeline-project-detection 'auto)
                (setq doom-modeline-lsp t)
                (setq doom-modeline-buffer-encoding t)
                (setq doom-modeline-checker-simple-format nil)
                (setq doom-modeline-minor-modes t)
                (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
                (setq doom-modeline-persp-name nil) ;; Revisar que hace esto, 
                (setq doom-modeline-major-mode-icon t)
                    (setq doom-modeline-enable-word-count t)
                ))

        (use-package minions
          :ensure t
    ;      :hook doom-modeline-mode
          :config
        (minions-mode t))

        (custom-set-faces
         '(mode-line ((t (:height 0.85))))
         '(mode-line-inactive ((t (:height 0.85)))))
  #+end_src
* Ivy-Rich
  #+begin_src emacs-lisp

    (use-package all-the-icons-ivy-rich
      :ensure t
      :init (all-the-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :ensure t
      :config
      (ivy-rich-mode t))

    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)

  #+end_src
  
* Ivy Postframe
#+begin_src emacs-lisp
  ;; (use-package ivy-posframe
  ;;   :ensure t
  ;;   :config
  ;;   (ivy-posframe-mode))
#+end_src
* Performance
#+begin_src emacs-lisp
  (setq read-process-output-max (* 2048 2048))

  (setq gc-cons-threshold 400000000)
#+end_src
* Custom functions
** Scroll Control 
#+begin_src emacs-lisp
    ;; Frames disabble scroll bars
    (defun my/disable-scroll-bars (frame)
      (modify-frame-parameters frame
                               '((vertical-scroll-bars . nil)
                                 (horizontal-scroll-bars . nil))))
    (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)
  #+end_src  
** Auto Revert
#+begin_src emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
#+end_src
** json-parse-error workaround
Reference: [[https://github.com/emacs-lsp/lsp-mode/issues/2681#issuecomment-792563858][https://github.com/emacs-lsp/lsp-mode/issues/2681#issuecomment-792563858]]
*** Error
(json-parse-error \u0000 is not allowed without JSON_ALLOW_NUL <callback> 1 113 113)
*** workaround
#+begin_src emacs-lisp
  ;(advice-add 'json-parse-string :around
  ;                        (lambda (orig string &rest rest)
  ;                          (apply orig (s-replace "\\u0000" "" string)
  ;                                         rest)))
  (advice-add 'json-parse-string :around
              (lambda (orig string &rest args)
                (apply orig                                                                            
                       (replace-regexp-in-string "\\\\u0000.*?\"" "\"" string)
                       args)))
#+end_src
** End of line and newline
#+begin_src emacs-lisp
  (defun end-of-line-and-newline ()
    (interactive)
    (end-of-line)
    (newline))

  (global-set-key (kbd "<C-return>") 'end-of-line-and-newline)
#+end_src
** End of line and idented newline
#+begin_src emacs-lisp
  (defun end-of-line-and-idented-newline ()
          (interactive)
          (end-of-line)
          (newline-and-indent))

  (global-set-key (kbd "<M-return>") 'end-of-line-and-idented-newline)
#+end_src

